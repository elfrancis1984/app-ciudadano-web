package ec.gob.mdt.ciudadano.ejb.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaQuery;

import ec.gob.mdt.ciudadano.exception.ServiceException;
import ec.gob.mdt.ciudadano.model.app.base.BaseEntity;

@Stateless
public class CiudadanoServiceBean {

	@PersistenceContext(unitName = "ciudadano_jpa")
	private EntityManager em;

	public EntityManager getEntityManager() {
		em.setProperty("filterStatus", 1);
		return em;
	}

	public EntityManager getEntityManagerWithOutFilters() {
		em.setProperty("filterStatus", 0);
		return em;
	}

	public void invalidEntity(String message, boolean show) {
		if (show)
			throw new IllegalArgumentException(message);
	}

	public Object getSecuenceNextValue(String sequenceName, String schema) {
		if (schema != null)
			sequenceName = schema + "." + sequenceName;
		Query query = getEntityManager().createNativeQuery("SELECT nextval( '" + sequenceName + "' ) FROM generate_series( 1, 1)");
		return query.getSingleResult();
	}

	public void updateSecuenceValue(String sequenceName, String schema, long value) {
		if (schema != null)
			sequenceName = schema + "." + sequenceName;
		Query query = getEntityManager().createNativeQuery("SELECT setval( '" + sequenceName + "', " + value + ", true)");
		query.getSingleResult();
	}

	public <T extends BaseEntity> T saveOrUpdate(T entidad) {
		if (!entidad.isPersisted()) {
			getEntityManager().persist(entidad);
			getEntityManager().flush();
			getEntityManager().refresh(entidad);
		} else {
			getEntityManager().merge(entidad);
		}
		return entidad;
	}

	public List<? extends BaseEntity> saveOrUpdate(List<? extends BaseEntity> lista) {
		for (BaseEntity t : lista) {
			saveOrUpdate(t);
		}
		return lista;
	}

	public List<? extends BaseEntity> saveOrUpdateReturnList(List<? extends BaseEntity> lista) {
		for (BaseEntity t : lista) {
			saveOrUpdate(t);
		}
		return lista;
	}

	public <T extends BaseEntity> T delete(T entidad) {
		entidad.setEstado(false);
		getEntityManager().merge(entidad);
		return entidad;
	}

	public List<? extends BaseEntity> delete(List<? extends BaseEntity> lista) {
		for (BaseEntity t : lista) {
			delete(t);
		}
		return lista;
	}

	@SuppressWarnings("unchecked")
	public List<? extends BaseEntity> findByNamedQuery(final String namedQueryName, final Map<String, Object> parameters) {
		Query query = getEntityManager().createNamedQuery(namedQueryName);
		if (parameters != null) {
			for (Entry<String, Object> entry : parameters.entrySet()) {
				query.setParameter(entry.getKey(), entry.getValue());
			}
		}
		return query.getResultList();
	}

	@SuppressWarnings("unchecked")
	public <T> List<T> findByNamedQueryGeneric(final String namedQueryName, final Map<String, Object> parameters) {
		Query query = getEntityManager().createNamedQuery(namedQueryName);
		if (parameters != null) {
			for (Entry<String, Object> entry : parameters.entrySet()) {
				query.setParameter(entry.getKey(), entry.getValue());
			}
		}
		return query.getResultList();
	}

	@SuppressWarnings("unchecked")
	public <T> T findByNamedQuerySingleResult(final String namedQueryName, final Map<String, Object> parameters) {
		Query query = getEntityManager().createNamedQuery(namedQueryName);
		if (parameters != null) {
			for (Entry<String, Object> entry : parameters.entrySet()) {
				query.setParameter(entry.getKey(), entry.getValue());
			}
		}
		try {
			return (T) query.getSingleResult();
		} catch (NoResultException nre) {
			return null;
		}
	}

	@SuppressWarnings("unchecked")
	public <T> T findByNamedQuerySingleResultWithOutFilters(final String namedQueryName, final Map<String, Object> parameters) {
		Query query = getEntityManagerWithOutFilters().createNamedQuery(namedQueryName);
		if (parameters != null) {
			for (Entry<String, Object> entry : parameters.entrySet()) {
				query.setParameter(entry.getKey(), entry.getValue());
			}
		}
		try {
			return (T) query.getSingleResult();
		} catch (NoResultException nre) {
			return null;
		}
	}

	@SuppressWarnings("unchecked")
	public List<? extends BaseEntity> findByNamedQueryPaginado(final String namedQueryName, final Map<String, Object> parameters, int limiteInicio, int limiteFin) {
		Query query = getEntityManager().createNamedQuery(namedQueryName).setFirstResult(limiteInicio).setMaxResults(limiteFin);
		if (parameters != null) {
			Set<Entry<String, Object>> parameterSet = parameters.entrySet();
			for (Entry<String, Object> entry : parameterSet) {
				query.setParameter(entry.getKey(), entry.getValue());
			}
		}
		return query.getResultList();
	}

	@SuppressWarnings("unchecked")
	public <T extends BaseEntity> T find(Class<? extends BaseEntity> type, Integer id) {
		return (T) this.getEntityManager().find(type, id);
	}

	@SuppressWarnings("unchecked")
	public List<? extends BaseEntity> findAll(Class<? extends BaseEntity> type) {
		CriteriaQuery<?> cq = getEntityManager().getCriteriaBuilder().createQuery();
		cq.multiselect(cq.from(type));
		return (List<? extends BaseEntity>) getEntityManager().createQuery(cq).getResultList();
	}

	@SuppressWarnings("unchecked")
	public List<Object> findByNativeQuery(String stringQuery, final Map<String, Object> parameters) {
		Query query = getEntityManager().createNativeQuery(stringQuery);
		if (parameters != null) {
			for (Entry<String, Object> entry : parameters.entrySet()) {
				query.setParameter(entry.getKey(), entry.getValue());
			}
		}
		return query.getResultList();
	}

	@SuppressWarnings("rawtypes")
	public List findNativeQuery(String sql, Class tipoClase) throws ServiceException {
		try {
			Query query = getEntityManager().createNativeQuery(sql, tipoClase);
			List lista = query.getResultList();
			if (lista != null && !lista.isEmpty()) {
				return lista;
			} else {
				return new ArrayList();
			}
		} catch (Exception e) {
			throw new ServiceException("Existe un error en la consulta ", e);
		}
	}

	@SuppressWarnings("unchecked")
	public <T> List<T> findByNativeQuery(String stringQuery, final Map<String, Object> parameters, Class<T> clazz) {
		Query query = getEntityManager().createNativeQuery(stringQuery, clazz);
		if (parameters != null) {
			for (Entry<String, Object> entry : parameters.entrySet()) {
				query.setParameter(entry.getKey(), entry.getValue());
			}
		}
		return query.getResultList();
	}

	public int insertUpdateByNativeQuery(String stringQuery, final Map<String, Object> parameters) {
		Query query = getEntityManager().createNativeQuery(stringQuery);
		if (parameters != null) {
			for (Entry<String, Object> entry : parameters.entrySet()) {
				query.setParameter(entry.getKey(), entry.getValue());
			}
		}
		return query.executeUpdate();
	}
}
